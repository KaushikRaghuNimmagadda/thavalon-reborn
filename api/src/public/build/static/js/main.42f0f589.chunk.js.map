{"version":3,"sources":["PlayerTag.js","Options.js","App.js","Game.js","Board.js","Mission.js","Player.js","serviceWorker.js","index.js"],"names":["PlayerTag","react_default","a","createElement","className","onClick","this","props","change","name","Component","Options","handleChange","key","_this","count","onSubmit","submit","options","map","element","type","defaultChecked","value","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","showInputs","setState","input","state","join","forwardToGame","game","parseInt","document","getElementById","games","includes","path","Redirect","to","info","playerSubmit","event","preventDefault","target","players","player_key","push","src_PlayerTag","removePlayer","reset","console","log","i","length","splice","isValid","Link","pathname","gameNum","names","num","array","values","next","done","options_change","roles","join_input","id","placeholder","switches","src_Options","Game","undefined","location","curr","toString","role","role_info","Board","Player","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42f0f589.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/App.css';\n\n\n/**\n * Models the tag representing a player. Expects a String name prop, and a change handler.\n */\nclass PlayerTag extends Component {\n    render() {\n        return ( <div className={\"player-tag-wrapper\"}>\n                <button className={\"close_button\"} onClick={this.props.change}>X</button>\n                <p className={\"player_name\"}>{this.props.name}</p>\n            </div>\n\n        );\n    }\n}\n\nexport default PlayerTag;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Options.css';\n\n\n/**\n * Models the options window, which toggles the role options for the name. Requires three props:\n * a submit function, an options array, and a onChange function which will be mapped to each\n * checkbox.\n */\nclass Options extends Component {\n\n    handleChange = (key) => {\n        this.props.handleChange(key);\n    };\n\n    render() {\n        let count = 0;\n        return (<div className={\"options_wrapper\"}>\n                <form className={\"option_form\"} onSubmit={this.props.submit}>\n                    <div className={\"checks\"}>\n                        {this.props.options.map(function (element) {\n                            count++;\n                        return (<div key={count} className={\"option_ele\"}>\n                       <label className=\"label\">\n                           <input className={\"check slider\"} type={\"checkbox\"} defaultChecked={element.value}/>\n                           {element.key}\n                       </label>\n                        </div>);\n                    })}\n                    </div>\n                    <input className={\"options_submit\"} type={\"submit\"} value={\"Done\"}/>\n                </form>\n            </div>\n\n        );\n    }\n}\n\nexport default Options;","import React, { Component } from 'react';\nimport './css/App.css';\nimport { Link, Redirect} from 'react-router-dom';\nimport \"./css/styles.css\";\nimport \"./PlayerTag\";\nimport \"./css/PlayerTag.css\";\nimport PlayerTag from \"./PlayerTag\";\nimport Options from \"./Options\";\n\n/**\n * The home screen for the game.\n */\nclass App extends Component {\n\n    /**\n     * Constructor for the lobby. Initializes state objects,\n     * including roles, and truth/false values for hidden screens.\n     */\n    constructor(props) {\n        super(props);\n        const roles =  [\n            {key: \"Arthur\", value: true},\n            {key: \"Classic Arthur\", value: false},\n            {key: \"Lancelot\", value: true},\n            {key: \"Percival\", value: true},\n            {key: \"Guinevere\", value: true},\n            {key: \"Merlin\", value: true},\n            {key: \"Titania\", value: true},\n            {key: \"Nimue\", value: false},\n            {key: \"Lovers\", value: true},\n            {key: \"Lone Lovers\", value: false},\n            {key: \"Mordred\", value: true},\n            {key: \"Morgana\", value: true},\n            {key: \"Maleagant\", value: true},\n            {key: \"Oberon\", value: true},\n            {key: \"Agravaine\", value: true},\n            {key: \"Colgravance\", value: true},\n\n\n        ];\n\n        this.state = {\n            games: [0],\n            gameNum: 0,\n            input: false,\n            info: false,\n            players: [],\n            names: [],\n            options: false,\n            join: false,\n            join_input: (<input type=\"text\"  className={\"input_ele\"} id ={\"join\"} placeholder={\"Enter Game ID\"} />),\n            roles: roles,\n            switches: [],\n            player_key: 0\n        };\n\n    }\n\n    /**\n     * Shows the create game fields.\n     */\n    showInputs = () => {\n       this.setState({input: !this.state.input});\n    };\n\n    /**\n     * Shows the join game fields.\n     */\n    join = () => {\n        this.setState({join: !this.state.join})\n    };\n\n    /**\n     * Forwards the player to the game specified by game id.\n     * @returns {*}\n     */\n    forwardToGame = () => {\n        const game = parseInt(document.getElementById(\"join\").value);\n        if (this.state.games.includes(\n            game)) {\n            const path = \"game/\" + game;\n            return <Redirect to={path}/>\n        } else {\n            return null;\n        }\n\n\n\n    };\n\n    /**\n     * Shows the options panel.\n     */\n    options = () => {\n        this.setState({options: !this.state.options})\n\n    };\n\n    /**\n     * Shows the information panel.\n     */\n    info = () => {\n        this.setState({info: !this.state.info})\n\n    };\n\n    /**\n     * Adds a player to the game\n     * @param event sumbit event for the player form.\n     */\n    playerSubmit = (event) => {\n        event.preventDefault();\n        if (event.target[0].value === \"\") {\n            return;\n        }\n        const players = this.state.players;\n        this.setState({player_key: this.state.player_key + 1} );\n        const key = this.state.player_key;\n\n        players.push({key: this.state.player_key, name: event.target[0].value, value:  <PlayerTag key={this.state.player_key}\n                                                                     change={() => this.removePlayer(key)}\n                                                                     name={event.target[0].value}/>});\n        this.setState({players: players});\n        document.getElementById(\"player-name-input\").reset();\n\n    };\n\n    /**\n     * Removes a player from the game.\n     * @param key leading to player.\n     */\n    removePlayer = (key) => {\n        console.log(\"key: \" + key);\n        const players = this.state.players;\n        let i;\n        for (i = 0; i < players.length; i++) {\n            if (players[i].key === key) {\n               break;\n            }\n        }\n        console.log(\"i: \" + i);\n\n        players.splice(i, 1);\n        this.setState({players: players});\n\n    };\n\n    /**\n     * Checks if a game can be started, and displays the appropriate button.\n     * @returns {*}\n     */\n    isValid = () => {\n        if (this.state.players.length === 5\n            || this.state.players.length === 7\n            || this.state.players.length === 8\n            || this.state.players.length === 10) {\n            return ( <Link to={{ pathname: \"/game/\" + this.state.gameNum, state: { names: this.names(), num: this.state.players.length} } }>\n                <button  className={\"large_button\"}>\n                    Start Game\n                </button>\n            </Link>);\n        } else {\n            return (<button className={\"invalid_start\"}>Start Game</button>)\n\n        }\n    };\n\n    /**\n     * Retrieves a list of String player names from the list of IDs.\n     * @returns {Array}\n     */\n    names = () => {\n        const array = [];\n        const names = this.state.players.values();\n        let next = names.next();\n        while (!next.done) {\n            array.push(next.value.name);\n            next = names.next();\n        }\n        return array;\n    };\n\n\n    options_change = (key) => {\n        const roles = this.state.roles;\n        roles[key] = !roles[key];\n        this.setState({roles: roles});\n    };\n\n    /**\n     * Renders the app.\n     * @returns {*}\n     */\n  render() {\n      const array = [];\n      const names = this.state.players.values();\n      let next = names.next();\n      while (!next.done) {\n          array.push(next.value.name);\n          next = names.next();\n      }\n      console.log(\"Array\");\n\n      console.log(array);\n      return (\n      <div className=\"lobby\">\n        <h1>\n          THavalon\n        </h1>\n            <button className={\"large_button\"} onClick={this.showInputs}>\n              Create Game\n          </button>\n          {this.state.input ?\n              <div>\n                  {this.state.options ?\n                  <div className={\"options\"}><Options options={this.state.roles} submit={this.options} />\n                  </div> : null}\n              <form className=\"player_input\" id={\"player-name-input\"} onSubmit={this.playerSubmit}>\n                  <input type=\"text\" id ={\"input-field\"} placeholder={\"Enter player name\"}/>\n                  <br></br>\n                  <input type={\"submit\"} id={\"player-submit\"}  value={\"Add\"}/>\n                  <button className={\"small_button\"} onClick={this.options}>Options</button>\n\n              </form>\n\n                  <div className={\"player_tags\"}>\n                      {this.state.players.map(function(element) {\n                          return element.value;\n                          })}\n                  </div>\n                  {this.isValid()}\n          </div> : null }\n          <button className={\"large_button\"} onClick={this.join}>\n              Join Game\n          </button>\n          {this.state.join ?\n              <div>\n                  <form className=\"player_input\">\n                      {this.state.join_input}\n                  </form> <br></br>\n                  <button className={\"small_button\"} onClick={this.forwardToGame}>\n                      Join\n                  </button>\n              </div> : null }\n\n              <div className=\"info\">\n                  {this.state.info ?\n                      <div className={\"rules_wrapper\"}>\n                          <button className={\"exit_button\"} onClick={this.info}> x </button>\n                          <div className={\"rules\"}>\n                          <h1>Rules</h1>\n                          <h2> Lorum Ipsum</h2>\n                          Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n                          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                          Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                          commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\n                          dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                          culpa qui officia deserunt mollit anim id est laborum\n                          <h2>Lorum Ipsum</h2>\n                          Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque\n                          laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                          architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas\n                          sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                          voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet,\n                          consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n                          magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam\n                          corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit\n                          qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n                          <h2>Lorum Ipsum</h2>\n                          At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum\n                          deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident,\n                          similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga.\n                          Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est\n                          eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis\n                          voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis\n                          aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae.\n                          Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur\n                          aut perferendis doloribus asperiores repellat.\n                          <button className={\"small_button\"} onClick={this.info}>Done</button>\n                      </div>\n                      </div>: null}\n                  <button className={\"info_button\"} onClick={this.info}>?</button>\n\n              </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport \"./css/Game.css\";\nimport { Link } from 'react-router-dom';\n\n/**\n * Models a game page, with links to each player.\n * Expects a names prop, which is an array of String names of players,\n */\nclass Game extends Component {\n\n    render() {\n\n        console.log(this.props);\n        let count = 0;\n        if (this.props.location.state.names === undefined) {\n          return null;\n        }\n        console.log(this.props.location.state.num);\n\n        return ( <div className=\"names\">\n                {this.props.location.state.names.map(curr =>\n                {\n                    const path = this.props.location.pathname + \"/\" + curr;\n                    console.log(path);\n                    count++;\n                    return (<Link key ={count} to={{pathname: path, state: {name: curr.toString(), role: \"You are Lorem Ipsum\",\n                        role_info: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\"}}}>\n                        <button className={\"my_button, large_button\"}>{curr.toString()}</button>\n                    </Link>);\n                })}\n                <Link key ={count} to={{pathname: \"/donotopen\", state: {name: \"Do Not Open\", role: \"\"}}}>\n                    <button className={\"my_button, large_button\"}>Do Not Open</button>\n                </Link>\n            </div>\n\n        );\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\nimport Mission from \"./Mission\";\n\n/**\n * Models a boards\n */\nclass Board extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     let board = [];\n    //     console.log(this.props.location.state);\n    //     switch (this.props.location.state.num) {\n    //         case 5:\n    //             board = [2, 3, 3, 3, 3];\n    //             break;\n    //         case 7:\n    //             board = [2, 3, 3, 4, 4];\n    //             break;\n    //         case 8:\n    //             board = [3, 4, 4, 5, 5];\n    //             break;\n    //         case 10:\n    //             board = [3, 4, 4, 5, 5];\n    //             break;\n    //         default:\n    //             board = [0];\n    //             break;\n    //     }\n    //     this.state = {board: board};\n    // }\n    render() {\n        return (\n            <div className={\"Board\"}>\n                {/*Board*/}\n                {/*{this.state.board.map(function(element) {*/}\n                    {/*return <Mission num={element}/>;*/}\n                {/*})}*/}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\n\n/**\n * Models the player page. Expects three props: name, which is the name of the player, role, which is\n * the role the game has assigned the player, and role_info, which is the information and text associated\n * with the role.\n\n */\nclass Mission extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pass: null,\n            color: \"grey\",\n            text: this.props.num\n        }\n    }\n\n    toggle = () => {\n        console.log(this.state.pass);\n     if (this.state.pass === null) {\n         this.setState({pass: true, color: \"green\", text: \"Pass\"});\n     } else if (this.state.pass === true) {\n         this.setState({pass: false, color: \"red\", text: \"Fail\"});\n     } else {\n         this.setState({pass: null, color: \"grey\", text: this.props.num});\n\n     }\n    };\n    render() {\n        return (\n            <div className={\"Mission\"}>\n                <button style={{background: this.state.color}} onClick={this.toggle}>{this.state.text}</button>\n            </div>\n\n        );\n    }\n}\n\nexport default Mission;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\n\n/**\n * Models the player page. Expects three props: name, which is the name of the player, role, which is\n * the role the game has assigned the player, and role_info, which is the information and text associated\n * with the role.\n\n */\nclass Player extends Component {\n    render() {\n        return ( <div className={\"player_info\"}>\n                <h1 className={\"player_title\"}> Displaying information for {this.props.location.state.name} </h1>\n                <h2>{this.props.location.state.role}</h2>\n               <p>{this.props.location.state.role_info}</p>\n\n            </div>\n\n        );\n    }\n}\n\nexport default Player;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport \"./css/styles.css\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Game from './Game.js';\nimport Board from './Board.js';\n\nimport Player from './Player.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter>\n    <Switch>\n        <Route exact path='/' component={App} />\n        <Route exact path='/game/:number' component={Game} />\n        <Route exact path='/game/:number/board' component={Board} />\n        <Route exact path='/game/:number/:name' component={Player} />\n    </Switch>\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}