{"version":3,"sources":["assets/left-trees.svg","assets/right-trees.svg","NewGame.js","CustomRules.js","RecentGames.js","JoinGame.js","Home.js","Player.js","DoNotOpen.js","Game.js","Rules.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewGame","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validateInputField","event","console","log","target","value","val","match","exec","shift","strings","filter","ele","includes","length","Set","size","setState","valid","names","sendGamePost","fetch","url","method","headers","Accept","Content-Type","body","JSON","stringify","state","then","response","json","data","hasOwnProperty","error","redirect","react_default","a","createElement","react_router","to","pathname","catch","customView","inputClass","buttonClass","className","onClick","back","id","placeholder","type","onChange","React","RecentGames","gameIds","_this2","numGames","count","map","link","react_router_dom","key","JoinGame","src_RecentGames","Home","goHome","currComponent","base","setComponent","component","src_NewGame","src_JoinGame","Player","constructInfo","info","infoArray","parse","alerts","concat","rolePresent","perfect","seen","pairSeen","e","replace","parsed","location","information","color","allegiance","des","description","split","name","role","DoNotOpen","total","player","params","Game","game","start","window","href","players","_this3","Rules","close","App","toggleRules","rules","src_Rules","exact","path","src","lefttrees","alt","righttrees","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.befe64fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/left-trees.fa90b519.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-trees.7e1fbb66.svg\";","import React from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { url } from './App'\nimport CustomRules from \"./CustomRules\";\n\n/**\n * Models the NewGame fields.\n */\nclass NewGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            valid: false,\n            names: [],\n            redirect: null,\n            error: '',\n            customView: false\n        };\n        console.log(url + 'url');\n    }\n\n    /**\n     * Validates that the input field contains 5, 7, 8, or 10 whitespace separated names\n     * @param ele input field to validate\n     */\n    validateInputField = (event) => {\n        console.log(event.target.value);\n        const val = event.target.value;\n        const regex = /^([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*$/;\n        const match = regex.exec(val);\n        console.log(val);\n        if (match) {\n            console.log(\"here\");\n            match.shift();\n            const strings = match.filter(ele => typeof ele === 'string');\n            if ([5, 7, 8, 10].includes(strings.length) && (new Set(strings)).size === strings.length) {\n                this.setState({valid: true, names: strings});\n                return;\n            }\n\n        }\n        this.setState({valid: false});\n\n    };\n\n    /**\n     * Makes a post request to the url to start a game\n     * @param obj\n     */\n    sendGamePost = () => {\n        fetch( url + '/names', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({names: this.state.names})\n        }).then(response => {\n            return response.json();\n        }).then(data => {\n            if(data.hasOwnProperty(\"error\")) {\n                // error, report to user\n                this.setState({error: data[\"error\"]});\n            } else {\n                // no error\n                const redirect = <Redirect to={{ pathname: \"/\" + data[\"id\"]}} />;\n                this.setState({redirect: redirect});\n            }\n\n        }).catch(error => {\n            console.log(error);\n        });\n    };\n\n    render() {\n        const inputClass = this.state.valid ? 'valid' : 'invalid';\n        const buttonClass = this.state.valid ? 'button-large' : 'button-large invalid-button';\n        return (\n            <div className={\"NewGame\"}>\n                {this.state.redirect}\n                <button className={'back-button'} onClick={this.props.back}><i className=\"material-icons\">\n                    arrow_back </i>\n                </button>\n                <div className={\"home-buttons\"}>\n                    <div className={'input-wrapper'}>\n                    <input\n                        id={\"new-game-input\"}\n                        className={inputClass}\n                        placeholder={'Enter player names'}\n                        type={'text'}\n                        onChange={this.validateInputField}/>\n                        <div className=\"help-text\">Enter 5, 7, 8 or 10 player names seperated by spaces </div>\n                        {this.state.valid ?\n                            <i className=\"material-icons validate-icon valid-icon\">done_alt</i> :\n                            <i className=\"material-icons validate-icon invalid-icon\">clear_alt</i>}\n                </div>\n                <button className={buttonClass} onClick={this.sendGamePost}>\n                    Start Game\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default NewGame;","import React, { Component } from 'react';\nimport './styles/App.scss';\n\n\n/**\n * Models the options window, which toggles the role options for the name. Requires three props:\n * a submit function, an options array, and a onChange function which will be mapped to each\n * checkbox.\n */\nclass CustomRules extends Component {\n    render() {\n        let count = 0;\n        return (\n            <div className={\"CustomRules\"}>\n                {this.props.display ?\n                    <form className={\"rules-form\"} onSubmit={(event) => this.props.submit(event)}>\n                        <div className={\"checks\"}>\n                            {this.props.options.map(function (element) {\n                                count++;\n                                return (<div key={count} className={\"rules-ele\"}>\n                                    <label className=\"label\">\n                                        <input className={\"check\"} type={\"checkbox\"} name={element.key} defaultChecked={element.value}/>\n                                        {element.key}\n                                    </label>\n                                </div>);\n                            })}\n                        </div>\n                        <input className={\"rules-submit\"} type={\"submit\"} value={\"Done\"}/>\n                    </form>\n                    : null\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default CustomRules;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport { url } from './App'\n\n// number of games to fetch\nconst numGames = 5;\n\n\n/**\n * Shows recently rolled games and allows users to navigate to them\n */\nclass RecentGames extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameIds: []\n        }\n    }\n\n    // fetch recent games from server\n    componentDidMount() {\n        fetch(url + '/currentgames', {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                numGames: numGames\n            })\n        }).then((response) => {\n            // parse json\n            return response.json();\n        }).then((data) => {\n            console.log(data);\n            // set state\n            this.setState({gameIds : data});\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    render() {\n        let count = 0;\n        return (<div className={\"RecentGames\"}>\n            <h2>Recent Games</h2>\n            <ul className={\"recent-games-list\"}>\n                {this.state.gameIds.map(ele => {\n                    count ++;\n                    const link = \"/\" + ele;\n                    return (\n                        <li className={'block'}>\n                        <Link key={count} className='game-link' to={{pathname: link}}>\n                            Game {ele}\n                        </Link>\n                    </li>\n                    );\n                })}\n            </ul>\n        </div>);\n    }\n}\n\nexport default RecentGames;","import React from \"react\";\nimport './styles/Game.scss';\nimport { url } from './App.js';\nimport RecentGames from \"./RecentGames\";\n/**\n * Models the Join Game fields.\n */\nclass JoinGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            valid: false\n        }\n\n    }\n\n    /**\n     * Validates that the input field contains a valid game id\n     * @param event input field to validate\n     */\n    validateInputField = (event) => {\n        const id = event.target.value;\n        if (id.length !== 4) {\n            this.setState({valid: false});\n            return;\n        }\n        const gameUrl = url + \"/isGame/\" + id;\n        fetch(gameUrl, {\n                method: \"GET\"\n            }).then(response => {\n                return response.json();\n            }).then (data => {\n                if (data) {\n                    this.setState({valid: true})\n\n                } else {\n                    this.setState({valid: false});\n                }\n            });\n        };\n\n\n    render() {\n        const inputClass = this.state.valid ? 'valid' : 'invalid';\n        const buttonClass = this.state.valid ? 'button-large' : 'button-large invalid-button';\n        return (\n            <div className={\"JoinGame\"}>\n                <div className={\"home-buttons\"}>\n                    <button className={'back-button'} onClick={this.props.back}><i className=\"material-icons\">\n                        arrow_back </i>\n                    </button>\n                    <div className={'input-wrapper'}>\n                        <input\n                            id={\"join-game-input\"}\n                            className={inputClass}\n                            placeholder={'Enter Game ID'}\n                            type={'text'}\n                            onChange={this.validateInputField}/>\n                        {this.state.valid ?\n                            <i className=\"material-icons validate-icon valid-icon\">done_alt</i> :\n                            <i className=\"material-icons validate-icon invalid-icon\">clear_alt</i>}\n                    </div>\n                    <button className={buttonClass}>\n                        Join Game\n                    </button>\n                </div>\n                <RecentGames />\n            </div>\n        )\n    }\n}\n\nexport default JoinGame;","import React from \"react\";\nimport './styles/Home.scss'\nimport NewGame from \"./NewGame\";\nimport JoinGame from \"./JoinGame\";\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.base =\n            <div className={\"home-buttons\"}>\n                <button className={\"button-large\"} onClick={() => this.setComponent(<NewGame back={this.goHome}\n                                                                                             setComponent={this.setComponent}\n\n                />)}> New Game</button>\n                <button className={\"button-large\"}  onClick={() => this.setComponent(<JoinGame back={this.goHome}/>)} >Join Game</button>\n             </div>;\n        this.state = {\n            currComponent: this.base\n        }\n\n    }\n    goHome = () => this.setState({currComponent: this.base});\n    setComponent = (component) => this.setState({currComponent: component});\n\n\n    render() {\n        return (\n            <div className={\"Home\"}>\n                <h1>thavalon</h1>\n                {this.state.currComponent}\n\n            </div>\n        )\n    }\n\n}\n\nexport default Home;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\n/**\n * Models the Game info.\n */\nclass Player extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            parsed: []\n        }\n    }\n    componentDidMount() {\n        this.constructInfo(this.props.location.state.info.information);\n    }\n\n    /**\n     * Parses a JSON info object\n     * @param info\n     */\n    constructInfo = (info) => {\n        console.log(info);\n        info = JSON.parse(info);\n        let infoArray = info.alerts;\n        infoArray = infoArray.concat(info.rolePresent, info.perfect, info.seen, info.pairSeen);\n        infoArray = infoArray.map(e => e.replace('You see', ''));\n\n        this.setState({parsed: infoArray})\n    };\n    /**\n     * Requests the player data for the game that is happening.\n     */\n    render() {\n        console.log(this.props.location.state);\n        const info = this.props.location.state.info;\n        const isGood = info.allegiance === 'Good';\n        const color = isGood ? 'green' : 'red';\n\n        let des = info.description;\n        des = des.replace(/You are on the good team/, '');\n        des = des.replace(/You are a member of the Evil council/, '');\n\n        des = des.split('\\n');\n        des = des.map(ele => {\n            console.log(typeof ele);\n            if (ele.includes('Ability')) {\n                return <span className={'bold'}> {ele} </span>;\n            } else {\n                return  <p>{ele}</p>;\n            }\n        });\n        console.log(this.state.parsed);\n\n        des = <div className={'des'}> {des} </div>;\n\n        return (\n            <div className={'Player'}>\n                <h1>{info.name}\n                </h1>\n                <div className={'block role'}>\n                    You are <span className={color + ' role-text'}> {info.role} </span>\n                </div>\n                <div className={'block info'}>\n                    You are on the <span className={color + ' role-text'}> {info.allegiance} </span>Team\n                    <div className={'description'}>\n                    {des}\n                    </div>\n                    <div className={'seen'}>\n                        {this.state.parsed.length !== 0 ? <div> You see:\n                        <ul>\n                        {this.state.parsed.map(ele => <li> {ele} </li>)}\n                        </ul>\n                            </div> : null}\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Player;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\n/**\n * Models the Game info.\n */\nclass DoNotOpen extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            info: []\n        }\n    }\n    componentDidMount() {\n        let total = this.props.location.state.info.map(player => {\n            let info = player.information;\n            info = JSON.parse(info);\n            let infoArray = info.alerts;\n            infoArray = infoArray.concat(info.rolePresent, info.perfect, info.seen, info.pairSeen);\n            const isGood = player.allegiance === 'Good';\n            const color = isGood ? 'green' : 'red';\n            return {\n                name: player.name,\n                role: <div className={'bold ' + color}> {player.role} </div>,\n                info: infoArray\n\n            }\n        });\n\n        this.setState({info: total})\n\n\n    }\n\n    /**\n     * Parses a JSON info object\n     * @param info\n     */\n    /**\n     * Requests the player data for the game that is happening.\n     */\n    render() {\n        console.log(this.props.location.state.info);\n        return (\n            <div className={'DoNotOpen'}>\n                <h1>Do Not Open</h1>\n                <h2>Game {this.props.match.params.id} </h2>\n\n                {this.state.info.map(ele => {\n                    return (<div className={'block do-not-open-block'}>\n                        <span className={'bold'}>{ele.name}</span> {ele.role}\n                        {ele.info}\n                    </div>);\n                })}\n\n            </div>\n        )\n    }\n}\n\nexport default DoNotOpen;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\nimport { Link } from 'react-router-dom'\n\n/**\n * Models the Game info.\n */\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            game: [],\n            start: ''\n        }\n\n    }\n\n    /**\n     * Requests the player data for the game that is happening.\n     */\n     componentDidMount() {\n        const id = this.props.match.params.id;\n        fetch(url + \"/game/info/\" + id, {\n            method: \"GET\"\n        }).then(response => {\n            return response.json();\n        }) .then (data => {\n            if(data.length === 0) {\n                // invalid id, redirect to homepage\n                window.location.href = \"/\";\n            } else {\n                console.log(data);\n                // found id, just do lookup\n                const players = data.map(ele => ele.name);\n                this.setState({\n                    game: data,\n                    start: data[0].name,\n                    players: players\n                });\n            }\n\n        }).catch(error => {\n            console.error(error);\n        });\n    };\n\n\n    render() {\n        return (\n            <div className={\"Game\"}>\n                <h1> Game {this.props.match.params.id} </h1>\n                <div className={'start block'}>\n                    <span className={'game-indent'}> Starting Player: <span className={'bold'}> {this.state.start} </span>\n                    </span> </div>\n                <div className={'players'}>\n                    <ul className={'player-list'}>\n                        {this.state.game.map(player => {\n                            return (<li className={'block'}>\n                                <Link to={{ pathname : this.props.location.pathname + \"/\" + player.name,\n                            state: { info: player, players: this.state.players }}}>\n                                    { player.name }\n                                </Link>\n                                    </li>);\n                        })}\n                        <li className={'do-not-open block red'}>\n                            <Link to={{ pathname : this.props.location.pathname + \"/\" + \"donotopen\",\n                                state: { info: this.state.game }}}>\n                                <span className={'red'}> Do Not Open </span>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './styles/App.scss';\n\n/**\n * Models the tag representing a player. Expects a String name prop, and a change handler.\n */\nclass Rules extends Component {\n    render() {\n        return (\n\n            <div className={\"Rules\"} id={\"rules\"}>\n                <h1>Rules</h1>\n                <button className={'close-button'} onClick={this.props.close}>\n                    <i className=\"material-icons\">\n                    clear\n                    </i>\n                </button>\n\n                {/*<ScrollableAnchor id={\"overview\"}>  <div> </div> </ScrollableAnchor>*/}\n                <div id={\"overview\"}> <h2>Overview</h2> </div>\n\n                THavalon is a custom ruleset for the social deception game Resistance: Avalon. If you've played Avalon before,\n                the basic structure of the game is the same, although there are many more roles.\n\n                {/*<ScrollableAnchor id={\"missions\"}> <div> </div> </ScrollableAnchor>*/}\n\n                <div id={\"missions\"}> <h2>Good, Evil, and Missions</h2> </div>\n                In THavalon, there are two teams, Good and Evil, who win depending on the outcome of five missions. For each mission,\n                a certain number of players are sent. These players each select a mission card (fail, pass, or reverse) to play,\n                and all cards played on the mission are then revealed to all players.\n\n                If there is one fail card played, even if all the rest of the cards are successes, the mission fails. If a reverse card\n                is played, the result of the mission is reversed (e.g. a failing mission will become a passing mission, or vise verse).\n                Only Lancelot and Maelegant can play reverse cards.\n\n                Good wins if they pass three missions, and survive assasination. Evil wins if they fail three missions.\n\n                {/*<ScrollableAnchor id={\"proposals\"}> <div> </div> </ScrollableAnchor>*/}\n\n                <div id={\"proposals\"}> <h2>Proposals</h2> </div>\n\n                To determine who goes on missions, players make proposals, which are then voted on. The first mission is a binary choice\n                between proposals made by the two players before the starting player, which are not discussed. After that, beginning with\n                the starting player, proposals travel clockwise, moving to the next person if they are voted down.\n\n                There are a limited number of missions that can be proposed per round (3 in 5 players, 4 in 7 and 8 player, and 5 in 10 player).\n                The last possible proposal is sent automatically.\n\n                {/*<ScrollableAnchor id={\"assasination\"}>  <div> </div> </ScrollableAnchor>*/}\n\n                <h2>Assassination</h2>\n\n                If Good has successfully passed three missions, Evil then has the chance to assasinate. To assasinate, can either\n                name a pair of Lovers, Merlin, Nimue if included, or claim there are no assasinable targets in the game. If Evil\n                selects correctly, they win. If not, Good wins.\n                {/*<ScrollableAnchor id={\"hijack\"}>  <div> </div> </ScrollableAnchor>*/}\n\n                <h2>Inquisition and Hijack</h2>\n\n                With 7+ players, two new mechanics come into play: weak inquisition and hijack.\n\n                Weak inquisition happens if the first proposal of a round is sent. The player who sent the mission can then select one\n                other player, and view their card, showing it to no one else.\n\n                Hijack happens when the last proposal of a round is sent. An evil player will have the ability \"Hijack\" declared in their\n                information. This player may then reveal themselves as evil, and remove a player from the mission, inserting themselves\n                on.\n\n                {/*<ScrollableAnchor id={\"good_roles\"}> <div> </div>  </ScrollableAnchor>*/}\n\n                <h2> Roles </h2>\n                <div className={\"italics\"}>Note: by default the following roles are included in the game,\n                    with no duplicates or Lone Lovers\n                    <div className={\"break\"}> 5 players: Lancelot, Merlin, the Lovers, Percival, Guinevere, Mordred, Morgana, Maelegant, Oberon </div>\n                    <div className={\"break\"}> 7 players: add Titania and Arthur</div>\n                    <div className={\"break\"}> 8 players: add Agravaine </div>\n                    <div className={\"break\"}> 10 players: add Colgrevance </div>\n\n\n\n\n                </div>\n\n                <h2>Good Roles</h2>\n\n                <ul className={\"roles-list\"}>\n                    <li> <em> Arthur: </em> knows which Good roles are present in the game. </li>\n                    <li> <em>Galahad: </em> Can declare after two failed missions. Then may conduct a 'night phase' where they request\n                        two good roles, who then reveal themselves to Galahad only.</li>\n                    <li> <em> Gawain: </em> Sees two pairs of players, one pair is on the same team, one is on opposite teams.\n                    </li>\n                    <li> <em> Guinevere: </em> Sees two rumors in the form of \"A sees B\" where A and B are players, one of which\n                        is true, one of which is a lie.\n                    </li>\n                    <li> <em> Lancelot: </em> may play reverses while on missions; appears evil to Merlin. </li>\n                    <li> <em> The Lovers (Tristan and Iseult): </em> see each other,\n                        always appear together (unless Lone Lovers is enabled),\n                        and can be assassinated as a pair. </li>\n                    <li> <em> Merlin: </em> sees all players that are either evil\n                        (except Mordred) or are Lancelot, can be assassinated.</li>\n                    <li> <em> Nimue: </em> knows which roles are in the game; can be Assassinated. </li>\n                    <li> <em> Percival: </em> sees both Merlin and Morgana,\n                        but cannot distinguish which role each seen player has. </li>\n                    <li> <em> Titania:</em> adds false information to one Evil player's information.\n                    </li>\n                </ul>\n\n                <h2>Evil Roles</h2>\n                <ul className={\"roles-list\"}>\n                    <li> <em> Mordred:</em> is hidden from Merlin.</li>\n                    <li> <em> Morgana: </em> appears like Merlin to Percival. </li>\n                    <li> <em> Maelegant:</em> may play Reversal cards while on missions.</li>\n                    <li> <em> Oberon: </em> adds false information to one Good player. </li>\n                    <li> <em> Agravaine: </em> must play Fails; may declare after having been on a successful mission to cause it to Fail instead.\n                    </li>\n                    <li> <em> Colgrevance </em> is hidden from other Evil roles; knows which player has each Evil role.\n                    </li>\n                </ul>\n\n\n            </div>);\n    }\n}\n\nexport default Rules;","import React from 'react';\nimport lefttrees from './assets/left-trees.svg';\nimport righttrees from './assets/right-trees.svg';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Home from \"./Home.js\";\nimport './styles/App.scss';\nimport Player from './Player'\nimport DoNotOpen from './DoNotOpen.js';\nimport Game from './Game'\nimport Rules from \"./Rules\";\n\n\n\nexport const url = 'https://thavalon-api-qa.herokuapp.com';\n\n/**\n * Main component for the program, which holds the routing information.\n *\n * Information is stored in the URL, using React Router, which allows\n * for refreshing without cookies.\n */\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { rules: false }\n  }\n\n    /**\n     * Routes the user to the correct component, storing information in the URL parameter\n     * @returns {*}\n     */\n\n    toggleRules = () => {\n        this.setState({ rules: !this.state.rules });\n    };\n\n    componentDidMount() {\n        /* wakes uo the api */\n        fetch(url, {\n            method: \"GET\"\n        }).catch(error => console.error(error));\n    }\n\n    render() {\n        return (\n            <Router className={\"App\"}>\n                { this.state.rules? <Rules close={this.toggleRules} /> : null }\n\n                    <Switch>\n                    <Route exact path={\"/\"} component={Home}/>\n                    <Route exact path={\"/:id\"} component={Game} />\n                    <Route exact path={\"/:id/donotopen\"} component={DoNotOpen} />\n                    <Route exact path={\"/:id/:player\"} component={Player} />\n\n                </Switch>\n                <button className={'rules-button'} onClick={this.toggleRules}> ? </button>\n              <img src={lefttrees} className={'background-img'} id={\"background-left\"} alt={\"Some trees\"} />\n              <img src={righttrees} className={'background-img'} id={\"background-right\"} alt={\"Some trees\"} />\n            </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}