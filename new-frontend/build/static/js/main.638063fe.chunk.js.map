{"version":3,"sources":["assets/left-trees.svg","assets/right-trees.svg","NewGame.js","RecentGames.js","JoinGame.js","Home.js","Player.js","DoNotOpen.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validateInputField","event","console","log","target","value","val","match","exec","shift","strings","filter","ele","includes","length","Set","size","setState","valid","names","sendGamePost","fetch","url","method","headers","Accept","Content-Type","body","JSON","stringify","state","then","response","json","data","hasOwnProperty","error","redirect","react_default","a","createElement","react_router","to","pathname","catch","customView","inputClass","buttonClass","className","onClick","back","id","placeholder","type","onChange","React","Component","RecentGames","gameIds","_this2","numGames","count","map","link","react_router_dom","key","JoinGame","src_RecentGames","Home","goHome","currComponent","base","newGame","src_NewGame","joinGame","src_JoinGame","Player","constructInfo","info","infoArray","parse","alerts","concat","rolePresent","perfect","seen","pairSeen","e","replace","parsed","location","information","color","allegiance","des","description","split","name","role","DoNotOpen","total","player","params","Game","game","start","window","href","players","_this3","App","exact","path","component","src","lefttrees","alt","righttrees","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.638063fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/left-trees.fa90b519.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-trees.7e1fbb66.svg\";","import React from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { url } from './App'\n\n/**\n * Models the NewGame fields.\n */\nclass NewGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            valid: false,\n            names: [],\n            redirect: null,\n            error: '',\n            customView: false\n        };\n        console.log(url + 'url');\n    }\n\n    /**\n     * Validates that the input field contains 5, 7, 8, or 10 whitespace separated names\n     * @param ele input field to validate\n     */\n    validateInputField = (event) => {\n        console.log(event.target.value);\n        const val = event.target.value;\n        const regex = /^([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s+([\\w\\d]+)\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*([\\w\\d]+)?\\s*$/;\n        const match = regex.exec(val);\n        console.log(val);\n        if (match) {\n            console.log(\"here\");\n            match.shift();\n            const strings = match.filter(ele => typeof ele === 'string');\n            if ([5, 7, 8, 10].includes(strings.length) && (new Set(strings)).size === strings.length) {\n                this.setState({valid: true, names: strings});\n                return;\n            }\n\n        }\n        this.setState({valid: false});\n\n    };\n\n    /**\n     * Makes a post request to the url to start a game\n     * @param obj\n     */\n    sendGamePost = () => {\n        fetch( url + '/names', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({names: this.state.names})\n        }).then(response => {\n            return response.json();\n        }).then(data => {\n            if(data.hasOwnProperty(\"error\")) {\n                // error, report to user\n                this.setState({error: data[\"error\"]});\n            } else {\n                // no error\n                const redirect = <Redirect to={{ pathname: \"/\" + data[\"id\"]}} />;\n                this.setState({redirect: redirect});\n            }\n\n        }).catch(error => {\n            console.log(error);\n        });\n    };\n\n    render() {\n        const inputClass = this.state.valid ? 'valid' : 'invalid';\n        const buttonClass = this.state.valid ? 'button-large' : 'button-large invalid-button';\n        return (\n            <div className={\"NewGame\"}>\n                {this.state.redirect}\n                <button className={'back-button'} onClick={this.props.back}><i className=\"material-icons\">\n                    arrow_back </i>\n                </button>\n                <div className={\"home-buttons\"}>\n                    <div className={'input-wrapper'}>\n                    <input\n                        id={\"new-game-input\"}\n                        className={inputClass}\n                        placeholder={'Enter player names'}\n                        type={'text'}\n                        onChange={this.validateInputField}/>\n                    {this.state.valid ?\n                        <i className=\"material-icons validate-icon valid-icon\">done_alt</i> :\n                        <i className=\"material-icons validate-icon invalid-icon\">clear_alt</i>}\n                    </div>\n                    <button className={buttonClass} onClick={this.sendGamePost}>\n                        Start Game\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default NewGame;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport { url } from './App'\n\n// number of games to fetch\nconst numGames = 5;\n\n\n/**\n * Shows recently rolled games and allows users to navigate to them\n */\nclass RecentGames extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameIds: []\n        }\n    }\n\n    // fetch recent games from server\n    componentDidMount() {\n        fetch(url + '/currentgames', {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                numGames: numGames\n            })\n        }).then((response) => {\n            // parse json\n            return response.json();\n        }).then((data) => {\n            console.log(data);\n            // set state\n            this.setState({gameIds : data});\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    render() {\n        let count = 0;\n        return (<div className={\"RecentGames\"}>\n            <h2>Recent Games</h2>\n            <ul className={\"recent-games-list\"}>\n                {this.state.gameIds.map(ele => {\n                    count ++;\n                    const link = \"/\" + ele;\n                    return (\n                        <li className={'block'}>\n                        <Link key={count} className='game-link' to={{pathname: link}}>\n                            Game {ele}\n                        </Link>\n                    </li>\n                    );\n                })}\n            </ul>\n        </div>);\n    }\n}\n\nexport default RecentGames;","import React from \"react\";\nimport './styles/Game.scss';\nimport { url } from './App.js';\nimport RecentGames from \"./RecentGames\";\n/**\n * Models the Join Game fields.\n */\nclass JoinGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            valid: false\n        }\n\n    }\n\n    /**\n     * Validates that the input field contains a valid game id\n     * @param event input field to validate\n     */\n    validateInputField = (event) => {\n        const id = event.target.value;\n        if (id.length !== 4) {\n            this.setState({valid: false});\n            return;\n        }\n        const gameUrl = url + \"/isGame/\" + id;\n        fetch(gameUrl, {\n                method: \"GET\"\n            }).then(response => {\n                return response.json();\n            }).then (data => {\n                if (data) {\n                    this.setState({valid: true})\n\n                } else {\n                    this.setState({valid: false});\n                }\n            });\n        };\n\n\n    render() {\n        const inputClass = this.state.valid ? 'valid' : 'invalid';\n        const buttonClass = this.state.valid ? 'button-large' : 'button-large invalid-button';\n        return (\n            <div className={\"JoinGame\"}>\n                <div className={\"home-buttons\"}>\n                    <button className={'back-button'} onClick={this.props.back}><i className=\"material-icons\">\n                        arrow_back </i>\n                    </button>\n                    <div className={'input-wrapper'}>\n                        <input\n                            id={\"join-game-input\"}\n                            className={inputClass}\n                            placeholder={'Enter Game ID'}\n                            type={'text'}\n                            onChange={this.validateInputField}/>\n                        {this.state.valid ?\n                            <i className=\"material-icons validate-icon valid-icon\">done_alt</i> :\n                            <i className=\"material-icons validate-icon invalid-icon\">clear_alt</i>}\n                    </div>\n                    <button className={buttonClass}>\n                        Join Game\n                    </button>\n                </div>\n                <RecentGames />\n            </div>\n        )\n    }\n}\n\nexport default JoinGame;","import React from \"react\";\nimport './styles/Home.scss'\nimport NewGame from \"./NewGame\";\nimport JoinGame from \"./JoinGame\";\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.base =\n            <div className={\"home-buttons\"}>\n                <button className={\"button-large\"} onClick={this.newGame}> New Game</button>\n                <button className={\"button-large\"}  onClick={this.joinGame} >Join Game</button>\n             </div>;\n        this.state = {\n            currComponent: this.base\n        }\n\n    }\n    goHome = () => this.setState({currComponent: this.base});\n    newGame = () => this.setState({currComponent: <NewGame back={this.goHome}/>});\n    joinGame = () => this.setState({currComponent: <JoinGame back={this.goHome}/>});\n\n    render() {\n        return (\n            <div className={\"Home\"}>\n                <h1>thavalon</h1>\n                {this.state.currComponent}\n\n            </div>\n        )\n    }\n\n}\n\nexport default Home;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\n/**\n * Models the Game info.\n */\nclass Player extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            parsed: []\n        }\n    }\n    componentDidMount() {\n        this.constructInfo(this.props.location.state.info.information);\n    }\n\n    /**\n     * Parses a JSON info object\n     * @param info\n     */\n    constructInfo = (info) => {\n        console.log(info);\n        info = JSON.parse(info);\n        let infoArray = info.alerts;\n        infoArray = infoArray.concat(info.rolePresent, info.perfect, info.seen, info.pairSeen);\n        infoArray = infoArray.map(e => e.replace('You see', ''));\n\n        this.setState({parsed: infoArray})\n    };\n    /**\n     * Requests the player data for the game that is happening.\n     */\n    render() {\n        console.log(this.props.location.state);\n        const info = this.props.location.state.info;\n        const isGood = info.allegiance === 'Good';\n        const color = isGood ? 'green' : 'red';\n\n        let des = info.description;\n        des = des.replace(/You are on the good team/, '');\n        des = des.replace(/You are a member of the Evil council/, '');\n\n        des = des.split('\\n');\n        des = des.map(ele => {\n            console.log(typeof ele);\n            if (ele.includes('Ability')) {\n                return <span className={'bold'}> {ele} </span>;\n            } else {\n                return  <p>{ele}</p>;\n            }\n        });\n        console.log(this.state.parsed);\n\n        des = <div className={'des'}> {des} </div>;\n\n        return (\n            <div className={'Player'}>\n                <h1>{info.name}\n                </h1>\n                <div className={'block role'}>\n                    You are <span className={color + ' role-text'}> {info.role} </span>\n                </div>\n                <div className={'block info'}>\n                    You are on the <span className={color + ' role-text'}> {info.allegiance} </span>Team\n                    <div className={'description'}>\n                    {des}\n                    </div>\n                    <div className={'seen'}>\n                        {this.state.parsed.length !== 0 ? <div> You see:\n                        <ul>\n                        {this.state.parsed.map(ele => <li> {ele} </li>)}\n                        </ul>\n                            </div> : null}\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Player;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\n/**\n * Models the Game info.\n */\nclass DoNotOpen extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            info: []\n        }\n    }\n    componentDidMount() {\n        let total = this.props.location.state.info.map(player => {\n            let info = player.information;\n            info = JSON.parse(info);\n            let infoArray = info.alerts;\n            infoArray = infoArray.concat(info.rolePresent, info.perfect, info.seen, info.pairSeen);\n            const isGood = player.allegiance === 'Good';\n            const color = isGood ? 'green' : 'red';\n            return {\n                name: player.name,\n                role: <div className={'bold ' + color}> {player.role} </div>,\n                info: infoArray\n\n            }\n        });\n\n        this.setState({info: total})\n\n\n    }\n\n    /**\n     * Parses a JSON info object\n     * @param info\n     */\n    /**\n     * Requests the player data for the game that is happening.\n     */\n    render() {\n        console.log(this.props.location.state.info);\n        return (\n            <div className={'DoNotOpen'}>\n                <h1>Do Not Open</h1>\n                <h2>Game {this.props.match.params.id} </h2>\n\n                {this.state.info.map(ele => {\n                    return (<div className={'block do-not-open-block'}>\n                        <span className={'bold'}>{ele.name}</span> {ele.role}\n                        {ele.info}\n                    </div>);\n                })}\n\n            </div>\n        )\n    }\n}\n\nexport default DoNotOpen;","import React from \"react\";\nimport './styles/Game.scss'\nimport { url } from './App'\nimport { Link } from 'react-router-dom'\n\n/**\n * Models the Game info.\n */\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            game: [],\n            start: ''\n        }\n\n    }\n\n    /**\n     * Requests the player data for the game that is happening.\n     */\n     componentDidMount() {\n        const id = this.props.match.params.id;\n        fetch(url + \"/game/info/\" + id, {\n            method: \"GET\"\n        }).then(response => {\n            return response.json();\n        }) .then (data => {\n            if(data.length === 0) {\n                // invalid id, redirect to homepage\n                window.location.href = \"/\";\n            } else {\n                console.log(data);\n                // found id, just do lookup\n                const players = data.map(ele => ele.name);\n                this.setState({\n                    game: data,\n                    start: data[0].name,\n                    players: players\n                });\n            }\n\n        }).catch(error => {\n            console.error(error);\n        });\n    };\n\n\n    render() {\n        return (\n            <div className={\"Game\"}>\n                <h1> Game {this.props.match.params.id} </h1>\n                <div className={'start block'}>\n                    <span className={'game-indent'}> Starting Player: <span className={'bold'}> {this.state.start} </span>\n                    </span> </div>\n                <div className={'players'}>\n                    <ul className={'player-list'}>\n                        {this.state.game.map(player => {\n                            return (<li className={'block'}>\n                                <Link to={{ pathname : this.props.location.pathname + \"/\" + player.name,\n                            state: { info: player, players: this.state.players }}}>\n                                    { player.name }\n                                </Link>\n                                    </li>);\n                        })}\n                        <li className={'do-not-open block red'}>\n                            <Link to={{ pathname : this.props.location.pathname + \"/\" + \"donotopen\",\n                                state: { info: this.state.game }}}>\n                                <span className={'red'}> Do Not Open </span>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default Game;","import React from 'react';\nimport lefttrees from './assets/left-trees.svg';\nimport righttrees from './assets/right-trees.svg';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Home from \"./Home.js\";\nimport './styles/App.scss';\nimport Player from './Player'\nimport DoNotOpen from './DoNotOpen.js';\nimport Game from './Game'\n\n\n\nexport const url = 'https://thavalon-api-qa.herokuapp.com';\n\n/**\n * Main component for the program, which holds the routing information.\n *\n * Information is stored in the URL, using React Router, which allows\n * for refreshing without cookies.\n */\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n    /**\n     * Routes the user to the correct component, storing information in the URL parameter\n     * @returns {*}\n     */\n  render() {\n    return (\n        <Router className={\"App\"}>\n            <Switch>\n                <Route exact path={\"/\"} component={Home}/>\n                <Route exact path={\"/:id\"} component={Game} />\n                <Route exact path={\"/:id/donotopen\"} component={DoNotOpen} />\n                <Route exact path={\"/:id/:player\"} component={Player} />\n\n            </Switch>\n          <img src={lefttrees} className={'background-img'} id={\"background-left\"} alt={\"Some trees\"} />\n          <img src={righttrees} className={'background-img'} id={\"background-right\"} alt={\"Some trees\"} />\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}