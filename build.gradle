apply plugin:'java'
apply plugin: 'kotlin'
apply plugin: 'application'

buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "mysql:mysql-connector-java:8.0.15"

    }
}



group 'thavalon_reborn'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean


task buildReact(type:Exec) {
    workingDir = '.'
    commandLine "./build_react.sh"
}

dependencies {
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    testCompile "io.ktor:ktor-server-tests:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
    runtime "mysql:mysql-connector-java:8.0.15"
}

jar {
    manifest {
        attributes(
                "Main-Class": "main.SiteKt"
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}



//apply plugin: 'maven'
//task createPom  {
//    pom {
//        project {
//            groupId 'sg.test.spring.web.guide'
//            artifactId 'sg-web-initial'
//            version '1.0.0-SNAPSHOT'
//
//            inceptionYear '2008'
//            licenses {
//                license {
//                    name 'The Apache Software License, Version 2.0'
//                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    distribution 'repo'
//                }
//            }
//        }
//    }.writeTo("pom.xml")
//}

//build.dependsOn buildReact
