{"version":3,"sources":["PlayerTag.js","Rules.js","Options.js","RecentGames.js","App.js","SubmitResults.js","Game.js","Board.js","Mission.js","DoNotOpen.js","Player.js","serviceWorker.js","index.js"],"names":["PlayerTag","react_default","a","createElement","className","onClick","this","props","change","name","Component","Rules","id","Options","_this","count","display","onSubmit","event","submit","options","map","element","key","type","defaultChecked","value","RecentGames","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gameIds","_this2","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","numGames","then","response","json","data","console","log","setState","catch","error","ele","url","Link","to","pathname","App","optionsSubmit","preventDefault","roles","i","target","length","checked","info","showInputs","input","join","namesContainValidChars","c","includes","isDuplicateName","trim","players","playerSubmit","document","getElementById","reset","player_key","push","src_PlayerTag","removePlayer","splice","postToGame","names","hasOwnProperty","redirect","Redirect","postToCustomGame","customBody","elt","duplicates","custom","isValid","forwardToGame","join_redirect","join_error","array","values","next","done","currId","game","join_input","placeholder","switches","src_Options","src_RecentGames","src_Rules","results","dontRecord","SubmitResults","make_submitter","result","submit_results","record","location","dont_record_results","Game","render_game","match","params","start","window","href","history","lib","text","curr","path","role","role_info","information","description","Board","DoNotOpen","parseInfo","parse","res","keys","forEach","flat","open","Player","split","Boolean","hostname","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7460e454.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/App.css';\n\n\n/**\n * Models the tag representing a player. Expects a String name prop, and a change handler.\n */\nclass PlayerTag extends Component {\n\n\n\n\n    render() {\n        return ( <div className={\"player-tag-wrapper\"}>\n                <button className={\"close_button\"} onClick={this.props.change}>X</button>\n            <p className={\"player_name\"}><span className={\"name\"}> {this.props.name} </span></p>\n            </div>\n\n        );\n    }\n}\n\nexport default PlayerTag;","import React, { Component } from 'react';\nimport './css/App.css';\n\n\n/**\n * Models the tag representing a player. Expects a String name prop, and a change handler.\n */\nclass Rules extends Component {\n        render() {\n        return (\n\n            <div className={\"Rules\"} id={\"rules\"}>\n\n\n\n\n                {/*<ScrollableAnchor id={\"overview\"}>  <div> </div> </ScrollableAnchor>*/}\n                <div id={\"overview\"}> <h2>Overview</h2> </div>\n\n                THavalon is a custom ruleset for the social deception game Resistance: Avalon. If you've played Avalon before,\n                the basic structure of the game is the same, although there are many more roles.\n\n                {/*<ScrollableAnchor id={\"missions\"}> <div> </div> </ScrollableAnchor>*/}\n\n                <div id={\"missions\"}> <h2>Good, Evil, and Missions</h2> </div>\n                In THavalon, there are two teams, Good and Evil, who win depending on the outcome of five missions. For each mission,\n                a certain number of players are sent. These players each select a mission card (fail, pass, or reverse) to play,\n                and all cards played on the mission are then revealed to all players.\n\n                If there is one fail card played, even if all the rest of the cards are successes, the mission fails. If a reverse card\n                is played, the result of the mission is reversed (e.g. a failing mission will become a passing mission, or vise verse).\n                Only Lancelot and Maelegant can play reverse cards.\n\n                Good wins if they pass three missions, and survive assasination. Evil wins if they fail three missions.\n\n                {/*<ScrollableAnchor id={\"proposals\"}> <div> </div> </ScrollableAnchor>*/}\n\n                    <div id={\"proposals\"}> <h2>Proposals</h2> </div>\n\n                To determine who goes on missions, players make proposals, which are then voted on. The first mission is a binary choice\n                between proposals made by the two players before the starting player, which are not discussed. After that, beginning with\n                the starting player, proposals travel clockwise, moving to the next person if they are voted down.\n\n                There are a limited number of missions that can be proposed per round (3 in 5 players, 4 in 7 and 8 player, and 5 in 10 player).\n                The last possible proposal is sent automatically.\n\n                {/*<ScrollableAnchor id={\"assasination\"}>  <div> </div> </ScrollableAnchor>*/}\n\n                <h2>Assassination</h2>\n\n                If Good has successfully passed three missions, Evil then has the chance to assasinate. To assasinate, can either\n                name a pair of Lovers, Merlin, Nimue if included, or claim there are no assasinable targets in the game. If Evil\n                selects correctly, they win. If not, Good wins.\n                {/*<ScrollableAnchor id={\"hijack\"}>  <div> </div> </ScrollableAnchor>*/}\n\n                <h2>Inquisition and Hijack</h2>\n\n                With 7+ players, two new mechanics come into play: weak inquisition and hijack.\n\n                Weak inquisition happens if the first proposal of a round is sent. The player who sent the mission can then select one\n                other player, and view their card, showing it to no one else.\n\n                Hijack happens when the last proposal of a round is sent. An evil player will have the ability \"Hijack\" declared in their\n                information. This player may then reveal themselves as evil, and remove a player from the mission, inserting themselves\n                on.\n\n                {/*<ScrollableAnchor id={\"good_roles\"}> <div> </div>  </ScrollableAnchor>*/}\n\n                    <h2> Roles </h2>\n                    <div className={\"italics\"}>Note: by default the following roles are included in the game,\n                            with no duplicates or Lone Lovers\n                            <div className={\"break\"}> 5 players: Lancelot, Merlin, the Lovers, Percival, Guinevere, Mordred, Morgana, Maelegant, Oberon </div>\n                            <div className={\"break\"}> 7 players: add Titania and Arthur</div>\n                            <div className={\"break\"}> 8 players: add Agravaine </div>\n                            <div className={\"break\"}> 10 players: add Colgrevance </div>\n\n\n\n\n                    </div>\n\n                <h2>Good Roles</h2>\n\n                    <ul className={\"roles-list\"}>\n                            <li> <em> Arthur: </em> knows which Good roles are present in the game. </li>\n                            <li> <em>Galahad: </em> Can declare after two failed missions. Then may conduct a 'night phase' where they request\n                                    two good roles, who then reveal themselves to Galahad only.</li>\n                            <li> <em> Gawain: </em> Sees two pairs of players, one pair is on the same team, one is on opposite teams.\n                            </li>\n                            <li> <em> Guinevere: </em> Sees two rumors in the form of \"A sees B\" where A and B are players, one of which\n                                    is true, one of which is a lie.\n                            </li>\n                            <li> <em> Lancelot: </em> may play reverses while on missions; appears evil to Merlin. </li>\n                            <li> <em> The Lovers (Tristan and Iseult): </em> see each other,\n                                    always appear together (unless Lone Lovers is enabled),\n                                    and can be assassinated as a pair. </li>\n                            <li> <em> Merlin: </em> sees all players that are either evil\n                                    (except Mordred) or are Lancelot, can be assassinated.</li>\n                            <li> <em> Nimue: </em> knows which roles are in the game; can be Assassinated. </li>\n                            <li> <em> Percival: </em> sees both Merlin and Morgana,\n                                    but cannot distinguish which role each seen player has. </li>\n                            <li> <em> Titania:</em> adds false information to one Evil player's information.\n                            </li>\n                    </ul>\n\n                <h2>Evil Roles</h2>\n                    <ul className={\"roles-list\"}>\n                    <li> <em> Mordred:</em> is hidden from Merlin.</li>\n                    <li> <em> Morgana: </em> appears like Merlin to Percival. </li>\n                    <li> <em> Maelegant:</em> may play Reversal cards while on missions.</li>\n                    <li> <em> Oberon: </em> adds false information to one Good player. </li>\n                    <li> <em> Agravaine: </em> must play Fails; may declare after having been on a successful mission to cause it to Fail instead.\n                    </li>\n                    <li> <em> Colgrevance </em> is hidden from other Evil roles; knows which player has each Evil role.\n                    </li>\n                    </ul>\n\n\n\n            </div>);\n    }\n}\n\nexport default Rules;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Options.css';\n\n\n/**\n * Models the options window, which toggles the role options for the name. Requires three props:\n * a submit function, an options array, and a onChange function which will be mapped to each\n * checkbox.\n */\nclass Options extends Component {\n    render() {\n        let count = 0;\n        return (\n            <div className={\"options_wrapper\"}>\n                {this.props.display ?\n                    <div className={\"options\"}>\n                        <form className={\"option_form\"} onSubmit={(event) => this.props.submit(event)}>\n                        <div className={\"checks\"}>\n                            {this.props.options.map(function (element) {\n                                count++;\n                                return (<div key={count} className={\"option_ele\"}>\n                                    <label className=\"label\">\n                                        <input className={\"check slider\"} type={\"checkbox\"} name={element.key} defaultChecked={element.value}/>\n                                        {element.key}\n                                    </label>\n                                </div>);\n                            })}\n                        </div>\n                        <input className={\"options_submit\"} type={\"submit\"} value={\"Done\"}/>\n                    </form>  </div>\n                    : null\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default Options;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./css/Player.css\";\nimport \"./css/RecentGames.css\";\n\n\n// number of games to fetch\nconst numGames = 5;\n\n/**\n * Shows recently rolled games and allows users to navigate to them\n */\nclass RecentGames extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameIds: []\n        }\n    }\n\n    // fetch recent games from server\n    componentDidMount() {\n        const url = \"/currentgames\";\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                numGames: numGames\n            })\n        }).then((response) => {\n            // parse json\n            return response.json();\n        }).then((data) => {\n            console.log(data);\n            // set state\n            this.setState({gameIds : data});\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    render() {\n        let count = 0;\n        return (<div className={\"recentgames\"}>\n                <ul className={\"recentgameslist\"}>\n                    {this.state.gameIds.map(ele => {\n                        count ++;\n                        const url = \"/\" + ele;\n                        return <li><Link key={count} to={{pathname: url}}>\n                            <button className={\"my_button, large_button\"}>\n                                <span className={\"name\"}>{ele}</span>\n                            </button>\n                        </Link></li>\n                    })}\n                </ul>\n        </div>);\n    }\n}\n\nexport default RecentGames;","import React, { Component } from 'react';\nimport './css/App.css';\nimport {Redirect} from 'react-router-dom';\nimport \"./css/styles.css\";\nimport \"./PlayerTag\";\nimport Rules from \"./Rules\";\nimport \"./css/PlayerTag.css\";\nimport PlayerTag from \"./PlayerTag\";\nimport Options from \"./Options\";\nimport RecentGames from \"./RecentGames\";\n\n/**\n * The home screen for the game.\n */\nclass App extends Component {\n\n    /**\n     * Constructor for the lobby. Initializes state objects,\n     * including roles, and truth/false values for hidden screens.\n     */\n    constructor(props) {\n        super(props);\n        const roles =  [\n            {key: \"Arthur\", value: true},\n            {key: \"Galahad\", value: false},\n            {key: \"Lancelot\", value: true},\n            {key: \"Percival\", value: true},\n            {key: \"Lone Percival\", value: false},\n            {key: \"Guinevere\", value: true},\n            {key: \"Merlin\", value: true},\n            {key: \"Titania\", value: true},\n            {key: \"Nimue\", value: false},\n            {key: \"Gawain\", value: false},\n            {key: \"Lovers\", value: true},\n            {key: \"Lone Lovers\", value: false},\n            {key: \"Mordred\", value: true},\n            {key: \"Morgana\", value: true},\n            {key: \"Maelegant\", value: true},\n            {key: \"Oberon\", value: true},\n            {key: \"Agravaine\", value: true},\n            {key: \"Colgrevance\", value: true},\n            {key: \"Duplicate Roles\", value: false}\n\n\n        ];\n\n        this.state = {\n            input: false,\n            info: false,\n            players: [],\n            names: [],\n            currId: \"NULL\",\n            game: [],\n            options: false,\n            join: false,\n            join_redirect: \"\",\n            join_input: (<input type=\"text\"  className={\"input_ele\"} id ={\"join\"} placeholder={\"Enter Game ID\"} />),\n            roles: roles,\n            switches: [],\n            redirect: \"\",\n            player_key: 0,\n            join_error: \"\",\n            error: \"\"\n        };\n\n    }\n\n    /**\n     * Shows the options panel.\n     */\n    options = () => {\n\n        this.setState({options: !this.state.options})\n\n\n    };\n\n    /**\n     * Hides the options panel and collects the data to be stored in state.\n     * Passed to the options comoponent as a prop.\n     * @param event\n     */\n    optionsSubmit = (event) => {\n        event.preventDefault();\n        let options = this.state.roles;\n        for (let i = 0; i < event.target.length-1; i++) {\n\n            options[i] = {key: event.target[i].name, value: event.target[i].checked};\n\n        }\n\n        this.setState({options: !this.state.options, roles: options});\n\n\n    };\n\n    /**\n     * Shows the information panel.\n     */\n    info = () => {\n        this.setState({info: !this.state.info})\n\n    };\n\n    /**\n     * Shows the input panel\n     */\n    showInputs = () => {\n        this.setState({input: !this.state.input});\n    };\n\n    /**\n     * Shows the join game fields.\n     */\n    join = () => {\n        this.setState({join: !this.state.join})\n    };\n\n\n     namesContainValidChars = (name) => {\n         // string containing all invalid characters\n         const invalid_chars = \"/?#\\\\.\";\n         // filter out all names containing invalid characters\n         for(let i in invalid_chars) {\n             let c = invalid_chars[i];\n             if(name.includes(c)) {\n                 return false;\n             }\n         }\n         return true;\n     };\n\n     isDuplicateName = (name) => {\n         // use trimmed name to avoid stuff like 'A     ' and '     A' being considered different names\n         name = name.trim();\n         for(let i in this.state.players) {\n             if(this.state.players[i].name.trim() === name) {\n                 return true;\n             }\n         }\n         return false;\n     };\n\n\n    /**\n     * Adds a player to the game\n     * @param event sumbit event for the player form.\n     */\n    playerSubmit = (event) => {\n        event.preventDefault();\n        const name = event.target[0].value;\n        document.getElementById(\"player-name-input\").reset();\n        this.setState({error: \"\"});\n        if (name === \"\") {\n            return;\n        }\n\n        if (!this.namesContainValidChars(name)) {\n            this.setState({error: \"Name contains invalid characters.\"});\n            return;\n        }\n\n        if(this.isDuplicateName(name)) {\n            this.setState({error: \"Duplicate names are not allowed.\"});\n\n            return;\n        }\n\n        if (name.length > 30) {\n            this.setState({error: \"Names must not be longer than 30 characters\"});\n\n            return;\n        }\n        const players = this.state.players;\n        this.setState({player_key: this.state.player_key + 1} );\n        const key = this.state.player_key;\n\n        players.push({key: this.state.player_key, name: name, value:  <PlayerTag key={this.state.player_key}\n                                                                     change={() => this.removePlayer(key)}\n                                                                     name={name}/>});\n        this.setState({players: players});\n\n    };\n\n    /**\n     * Removes a player from the game.\n     * @param key leading to player.\n     */\n    removePlayer = (key) => {\n        const players = this.state.players;\n        let i;\n        for (i = 0; i < players.length; i++) {\n            if (players[i].key === key) {\n               break;\n            }\n        }\n\n        players.splice(i, 1);\n        this.setState({players: players});\n\n    };\n\n    /**\n     * Redirects to a new game on submit of the Create Game form.\n     */\n     postToGame = () => {\n        fetch('/names', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                names: this.names()\n            })\n        }).then(response => {\n            return response.json();\n        }).then(data => {\n            if(data.hasOwnProperty(\"error\")) {\n                // error, report to user\n                this.setState({error: data[\"error\"]});\n            } else {\n                // no error\n                const redirect = <Redirect to={{ pathname: \"/\" + data[\"id\"]}} />;\n                this.setState({redirect: redirect});\n            }\n\n        }).catch(error => {\n                console.log(error);\n            });\n    };\n\n\n    /**\n     * Redirects to a new custom game on submit of the Create Game form.\n     */\n     postToCustomGame = () => {\n        // construct custom info to post\n        let customBody = {};\n        for(let i in this.state.roles) {\n            let elt = this.state.roles[i];\n            customBody[elt.key] = elt.value;\n        }\n\n        let duplicates = customBody[\"Duplicate Roles\"];\n        // remove key from copy so that the only info in the json is role related\n        delete customBody[\"Duplicate Roles\"];\n        // parse role keys that need to be changed\n        if(customBody[\"Lone Percival\"]) {\n           delete customBody[\"Lone Percival\"];\n           customBody[\"LonePercival\"] = true;\n        }\n        if(customBody[\"Lone Lovers\"]) {\n           delete customBody[\"Lone Lovers\"];\n           customBody[\"LoneTristan\"] = true;\n           customBody[\"LoneIseult\"] = true;\n        }\n        if(customBody[\"Lovers\"]) {\n            delete customBody[\"Lovers\"];\n            customBody[\"Tristan\"] = true;\n            customBody[\"Iseult\"] = true;\n        }\n\n\n        fetch('/names', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                names: this.names(),\n                custom: customBody,\n                duplicates: duplicates\n            })\n        }).then(response => {\n            return response.json();\n\n        }).then(data => {\n            if(data.hasOwnProperty(\"error\")) {\n                // error, report to user\n                this.setState({error: data[\"error\"]});\n            } else {\n                // no error\n                const redirect = <Redirect to={{ pathname: \"/\" + data[\"id\"]}} />;\n                this.setState({redirect: redirect});\n            }\n        }).catch(error => {\n                console.log(error);\n            });\n    };\n\n\n    /**\n     * Checks if a game can be started, and displays the appropriate button.\n     * @returns {*}\n     */\n    isValid = () => {\n        if ((this.state.players.length === 5\n            || this.state.players.length === 7\n            || this.state.players.length === 8\n            || this.state.players.length === 10)) {\n\n            return (\n                <div className={\"start_button_div\"}>\n                    <button onClick={this.postToGame} className={\"large_button start_button\"}>\n                        Start Game\n                    </button>\n                    <button onClick={this.postToCustomGame} className={\"large_button start_button\"}>\n                        Start Custom Game\n                    </button>\n                </div>\n           );\n        } else {\n            return (\n                <div className={\"start_button_div\"}>\n                    <button className={\"invalid_start start_button\"}>Start Game</button>\n                    <button className={\"invalid_start start_button\"}>Start Custom Game</button>\n                </div>)\n\n        }\n    };\n\n    /**\n     * Forwards the player to the game specified by game id.\n     * @returns {*}\n     */\n    forwardToGame = (event) => {\n        event.preventDefault();\n        const id = event.target[0].value;\n        const url = \"/isGame/\" + id;\n        fetch(url, {\n            method: \"GET\"\n        }).then(response => {\n            return response.json();\n        }).then (data => {\n            if (data) {\n                this.setState({join_redirect: <Redirect to={{ pathname: \"/\" + id}} />})\n\n            } else {\n                this.setState({join_error: \"Game ID not found\"});\n            }\n        });\n    };\n\n    /**\n     * Retrieves a list of String player names from the list of IDs.\n     * @returns {Array}\n     */\n    names = () => {\n        const array = [];\n        const names = this.state.players.values();\n        let next = names.next();\n        while (!next.done) {\n            array.push(next.value.name);\n            next = names.next();\n        }\n        return array;\n    };\n\n\n\n\n    /**\n     * Renders the app.\n     * @returns {*}\n     */\n  render() {\n      let array = [];\n      const names = this.state.players.values();\n      let next = names.next();\n      while (!next.done) {\n          array.push(next.value.name);\n          next = names.next();\n      }\n      return (\n      <div className=\"lobby\">\n          {this.state.redirect}\n          {this.state.join_redirect}\n                  <Options options={this.state.roles} display={this.state.options} submit={this.optionsSubmit} />\n       <h1>\n          THavalon\n        </h1>\n            <button className={\"large_button\"} onClick={this.showInputs}>\n              Create Game\n          </button>\n\n          {this.state.input ?\n              <div>\n              <form className=\"player_input\" id={\"player-name-input\"} onSubmit={this.playerSubmit}>\n                  <input type=\"text\" id ={\"input-field\"} placeholder={\"Enter player name\"}/>\n                  <br></br>\n                  <div className={\"error\"}>{this.state.error}</div>\n                  <input type={\"submit\"} className={\"player-submit\"} id={\"add-submit\"} value={\"Add\"}/>\n                  <button className={\"small_button\"} onClick={this.options}>Options</button>\n\n              </form>\n\n                  <div className={\"player_tags\"}>\n                      {this.state.players.map(function(element) {\n                          return element.value;\n                          })}\n                  </div>\n                  {this.isValid()}\n          </div> : null }\n          <button className={\"large_button\"} onClick={this.join}>\n              Join Game\n          </button>\n          {this.state.join ?\n              <div>\n                  <form className=\"player_input\" onSubmit={this.forwardToGame}>\n                      {this.state.join_input}\n                          <input type={\"submit\"} className={\"player-submit\"} id={\"join-submit\"} value={\"Join\"}/>\n                      <br></br>\n                      <div className=\"error\"> {this.state.join_error} </div>\n                  </form>\n                  <RecentGames/>\n\n              </div> : null }\n\n              <div className=\"info\">\n                  {this.state.info ?\n                      <div className={\"rules_wrapper\"}>\n                          <button className={\"exit_button\"} onClick={this.info}> x </button>\n                          <div className={\"rules\"}>\n                          <h1>Rules</h1>\n                              <Rules />\n\n                      </div>\n                      </div>: null}\n                  <button className={\"info_button\"} onClick={this.info}>?</button>\n              </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport \"./css/Player.css\";\nimport Link from \"react-router-dom/es/Link\";\n\n\n// different types of game ending results\nconst results = [\"Good Wins!\", \"Evil wins on missions!\", \"Evil wins by assassination!\"];\n\nconst dontRecord = \"Don't Record Results!\";\n\n/**\n * Shows different options for how games can end and sends results to server\n */\nclass SubmitResults extends Component {\n\n    make_submitter = (result) => {\n        return () => {\n            this.submit_results(result, true);\n        }\n    };\n\n    submit_results = (result, record) => {\n        const id = this.props.location.state.id;\n        const url = \"/gameover/\" + id;\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                result: result,\n                record: record\n            })\n        }).catch(error => {\n            console.log(error);\n        });\n    };\n\n    dont_record_results = () => {\n        this.submit_results(dontRecord, false);\n    };\n\n    render() {\n        let count = 0;\n        return (<div className={\"submitresults\"}>\n            <h1> Submit results for game {this.props.location.state.id} </h1>\n                <ul>\n                    {results.map(ele => {\n                        count ++;\n                        return <li><Link key={count} onClick={this.make_submitter(ele)} to={{pathname: \"/\"}}>\n                                <button className={\"my_button, large_button\"}>\n                                    {ele}\n                                </button>\n                            </Link></li>\n                    })}\n                    <li>\n                        <Link key={count + 1} onClick={this.dont_record_results} to={{pathname: \"/\"}}>\n                            <button className={\"my_button, large_button\"}>\n                                {dontRecord}\n                            </button>\n                        </Link>\n                    </li>\n                </ul>\n\n        </div>);\n    }\n}\n\nexport default SubmitResults;","import React, { Component } from 'react';\nimport \"./css/Game.css\";\nimport { Link } from 'react-router-dom';\nimport SubmitResults from \"./SubmitResults\";\n\nimport { CopyToClipboard}  from 'react-copy-to-clipboard';\n/**\n * Models a game page, with links to each player.\n */\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            game: [],\n            start: \"\"\n        }}\n\n    render_game = () => {\n        const id = this.props.match.params.id;\n        console.log(\"Get Game Info\");\n        const url = \"/game/info/\" + id;\n        fetch(url, {\n            method: \"GET\"\n        }).then(response => {\n                return response.json();\n            }) .then (data => {\n            console.log(\"Response\");\n            console.log(data);\n            if(data.length === 0) {\n                // invalid id, redirect to homepage\n                window.location.href = \"/\";\n            } else {\n                // found id, just do lookup\n                this.setState({game: data, start: data[0].name});\n                return data;\n            }\n\n        }).catch(error => {\n            console.log(error);\n        });\n    };\n\n\n    componentWillMount() {\n        this.props.history.push(\"\");\n        this.props.history.push(this.props.location);\n\n        this.render_game();\n    }\n\n\n    render() {\n        let count = 0;\n        console.log(this.props.location);\n        return ( <div className=\"names\">\n                <h3>Game ID: {this.props.match.params.id} </h3>\n                <CopyToClipboard id={\"copy\"} text={window.location.href}>\n                    <button className={\"small_button my_button\"} id={\"copy_button\"}>Copy</button>\n                </CopyToClipboard>\n            <h3> Starting Player:<span className={\"name\"}> {this.state.start}</span> </h3>\n\n                {this.state.game.map(curr =>\n                {\n                    const path = this.props.location.pathname + \"/\" + curr.name;\n                    count++;\n                    return (<Link key={count} to={{pathname: path, state: {name: curr.name, role: curr.role,\n                        role_info: curr.information, description: curr.description}}}>\n                        <button className={\"my_button, large_button\"}><span className={\"name\"}>{curr.name}</span></button>\n                    </Link>);\n                })}\n                <Link to={{pathname: this.props.location.pathname + \"/game/donotopen\", state: {game: this.state.game}}}>\n                        <button className={\"my_button, large_button\"}>Do Not Open</button>\n                </Link>\n                <Link to={{pathname: \"/submitresults\", state: {id: this.props.match.params.id}}}>\n                    <button className={\"my_button, large_button\"}>Submit Game Results</button>\n                </Link>\n            </div>\n\n        );\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\nimport Mission from \"./Mission\";\n\n/**\n * Models a boards\n */\nclass Board extends Component {\n    render() {\n        return (\n            <div className={\"Board\"}>\n                {/*Board*/}\n                {/*{this.state.board.map(function(element) {*/}\n                    {/*return <Mission num={element}/>;*/}\n                {/*})}*/}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\n\nclass Mission extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pass: null,\n            color: \"grey\",\n            text: this.props.num\n        }\n    }\n\n    toggle = () => {\n        console.log(this.state.pass);\n     if (this.state.pass === null) {\n         this.setState({pass: true, color: \"green\", text: \"Pass\"});\n     } else if (this.state.pass === true) {\n         this.setState({pass: false, color: \"red\", text: \"Fail\"});\n     } else {\n         this.setState({pass: null, color: \"grey\", text: this.props.num});\n\n     }\n    };\n    render() {\n        return (\n            <div className={\"Mission\"}>\n                <button style={{background: this.state.color}} onClick={this.toggle}>{this.state.text}</button>\n            </div>\n\n        );\n    }\n}\n\nexport default Mission;","import React, { Component } from 'react';\nimport \"./css/Player.css\";\n\n/**\n * Models a game page, with links to each player.\n */\nclass DoNotOpen extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            text: \"Show\"\n        }\n    }\n\n    /**\n     * Parses the information array for each player.\n     * @param ele\n     * @returns {*[]}\n     */\n    parseInfo = (ele) => {\n        const info = JSON.parse(ele);\n        console.log(info);\n        let res = [];\n        // collect all information arrays into one 2d array\n        Object.keys(info).forEach((key) => {\n            res.push(info[key]);\n        });\n        console.log(res);\n\n        return res.flat().map(ele => {\n            return <div>{ele}</div>\n            }\n        );\n\n    };\n\n    open = () => {\n        this.setState({open: !this.state.open, text: this.state.open ? \"Show\" : \"Hide\"});\n    };\n\n    render() {\n        return (<div className={\"donotopen\"}>\n            <h1> Do Not Open </h1>\n            <button className={\"my_button, large_button\"} id={\"show_button\"} onClick={this.open}>{this.state.text}</button>\n            {this.state.open ?\n                <ul className={\"donotopen_list\"}>\n                    {this.props.location.state.game.map(ele => {\n                        return <li><span className={\"name\"}>{ele.name}</span> is {ele.role}, seeing: {this.parseInfo(ele.information)}</li>\n                    })}\n                </ul> : null\n                }\n\n        </div>);\n    }\n}\n\nexport default DoNotOpen;","import React, { Component } from 'react';\nimport './css/App.css';\nimport './css/Player.css';\n\n/**\n * Models the player page. Expects three props: name, which is the name of the player, role, which is\n * the role the game has assigned the player, and role_info, which is the information and text associated\n * with the role.\n\n */\nclass Player extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {info: this.parseInfo()};\n    }\n\n    parseInfo = () => {\n        const info = JSON.parse(this.props.location.state.role_info);\n        console.log(info);\n        let res = [];\n        // collect all information arrays into one 2d array\n        Object.keys(info).forEach((key) => {\n            res.push(info[key]);\n        });\n        console.log(res);\n\n        return res.flat();\n    };\n\n    render() {\n        return ( <div className={\"player_info\"}>\n                <h1 className={\"player_title\"}> Displaying information for {this.props.location.state.name} </h1>\n                <h2>You are {this.props.location.state.role}</h2>\n                <div className={\"description\"}>\n                    {this.props.location.state.description.split(\"\\n\").map((i,key) => {\n                        return <div key={key}>{i} <br></br></div>;\n                    })}\n                </div>\n                <ul>\n                    {this.state.info.map(function(ele) {\n                        return <li>{ele}</li>;\n                    })}\n                </ul>\n            </div>\n\n        );\n    }\n}\n\nexport default Player;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport \"./css/styles.css\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Game from './Game.js';\nimport Board from './Board.js';\nimport DoNotOpen from './DoNotOpen.js';\n\nimport Player from './Player.js';\n\nimport * as serviceWorker from './serviceWorker';\nimport SubmitResults from \"./SubmitResults\";\n\n\nReactDOM.render(<BrowserRouter>\n    <Switch>\n        <Route exact path='/' component={App} />\n        <Route exact path='/submitresults' component={SubmitResults}/>\n        <Route exact path='/:id' component={Game} />\n        <Route exact path='/:id/game/donotopen' component={DoNotOpen} />\n\n        <Route exact path='/:id/board' component={Board} />\n        <Route exact path='/:id/:name' component={Player} />\n\n    </Switch>\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}